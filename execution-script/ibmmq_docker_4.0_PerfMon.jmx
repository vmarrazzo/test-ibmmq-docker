<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="setupDone" elementType="Argument">
            <stringProp name="Argument.name">setupDone</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stopDone" elementType="Argument">
            <stringProp name="Argument.name">stopDone</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nrThreads" elementType="Argument">
            <stringProp name="Argument.name">nrThreads</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="msg4Second" elementType="Argument">
            <stringProp name="Argument.name">msg4Second</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpTime" elementType="Argument">
            <stringProp name="Argument.name">rampUpTime</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="under_test_host" elementType="Argument">
            <stringProp name="Argument.name">under_test_host</stringProp>
            <stringProp name="Argument.value">wmq</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="perfmon_report_file" elementType="Argument">
            <stringProp name="Argument.name">perfmon_report_file</stringProp>
            <stringProp name="Argument.value">/mnt/jmeter/shared/curr_perfMon_report.jtl</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512573048000</longProp>
        <longProp name="ThreadGroup.end_time">1512573048000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${setupDone}&quot;==&quot;false&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.ibm.msg.client.jms.JmsConnectionFactory
import com.ibm.msg.client.jms.JmsFactoryFactory
import com.ibm.msg.client.wmq.WMQConstants

import javax.jms.Session

/**
 * Configuration parameter
 */
def hostName = vars.get(&quot;under_test_host&quot;)
def hostPort = 1414
def channelName = &quot;DEV.APP.SVRCONN&quot;
def queueManagerName = &quot;QM_WITHOUT_TLS&quot;
def queueName = &quot;DEV.QUEUE.1&quot;

log.info(&quot;Connect to $queueManagerName-&gt;$channelName at $hostName:$hostPort&quot;)
	
def ff = JmsFactoryFactory.getInstance(WMQConstants.WMQ_PROVIDER)
def cf = ff.createConnectionFactory()

// Set the properties
cf.setStringProperty(WMQConstants.WMQ_HOST_NAME, hostName)
cf.setIntProperty(WMQConstants.WMQ_PORT, hostPort)
cf.setStringProperty(WMQConstants.WMQ_CHANNEL, channelName)
cf.setIntProperty(WMQConstants.WMQ_CONNECTION_MODE, WMQConstants.WMQ_CM_CLIENT)
cf.setStringProperty(WMQConstants.WMQ_QUEUE_MANAGER, queueManagerName)

/**
 * TLS Section
 */
def tlsKeystorePath = &quot;../ibmmq_docker/my-cert.jks&quot;
def tlsKeystorePwd = &quot;changeit&quot;
/*
cf.setStringProperty(WMQConstants.WMQ_SSL_CIPHER_SUITE, &quot;SSL_RSA_WITH_AES_256_GCM_SHA384&quot;)
cf.setStringProperty(WMQConstants.WMQ_SSL_CIPHER_SPEC, &quot;TLS_RSA_WITH_AES_256_GCM_SHA384&quot;)

System.setProperty(&quot;com.ibm.mq.cfg.preferTLS&quot;, &quot;true&quot;)
System.setProperty(&quot;com.ibm.mq.cfg.useIBMCipherMappings&quot;, &quot;false&quot;)
System.setProperty(&quot;javax.net.ssl.keyStore&quot;, tlsKeystorePath)
System.setProperty(&quot;javax.net.ssl.keyStorePassword&quot;, tlsKeystorePwd)
System.setProperty(&quot;javax.net.ssl.trustStore&quot;, tlsKeystorePath)
System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, tlsKeystorePwd)

/**
 * TLS Section - END
 */
 
def conn = cf.createConnection(&quot;app&quot;, &quot;test&quot;)
def sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)
def destination = sess.createQueue(queueName)

conn.start()

log.info(&quot;#### Completed setup!&quot;)

/**
 * Save objects required into other Thread Groups
 */
System.getProperties().put(&quot;Session&quot;, sess)
System.getProperties().put(&quot;Connection&quot;, conn)
System.getProperties().put(&quot;Destination&quot;, destination)

vars.put(&quot;setupDone&quot;, &quot;true&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup TLS" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.ibm.msg.client.jms.JmsConnectionFactory
import com.ibm.msg.client.jms.JmsFactoryFactory
import com.ibm.msg.client.wmq.WMQConstants

import javax.jms.Session

/**
 * Configuration parameter
 */
def hostName = vars.get(&quot;under_test_host&quot;)
def hostPort = 1415
def channelName = &quot;DEV.APP.SVRCONN&quot;
def queueManagerName = &quot;QM_WITH_TLS&quot;
def queueName = &quot;DEV.QUEUE.1&quot;

log.info(&quot;Connect to $queueManagerName-&gt;$channelName at $hostName:$hostPort&quot;)

def ff = JmsFactoryFactory.getInstance(WMQConstants.WMQ_PROVIDER)
def cf = ff.createConnectionFactory()

// Set the properties
cf.setStringProperty(WMQConstants.WMQ_HOST_NAME, hostName)
cf.setIntProperty(WMQConstants.WMQ_PORT, hostPort)
cf.setStringProperty(WMQConstants.WMQ_CHANNEL, channelName)
cf.setIntProperty(WMQConstants.WMQ_CONNECTION_MODE, WMQConstants.WMQ_CM_CLIENT)
cf.setStringProperty(WMQConstants.WMQ_QUEUE_MANAGER, queueManagerName)

/**
 * TLS Section
 */
def tlsKeystorePath = &quot;/mnt/jmeter/my-cert.jks&quot;
def tlsKeystorePwd = &quot;changeit&quot;

log.info(&quot;##### Securing channel with TLS&quot;)

cf.setStringProperty(WMQConstants.WMQ_SSL_CIPHER_SUITE, &quot;SSL_RSA_WITH_AES_256_GCM_SHA384&quot;)
cf.setStringProperty(WMQConstants.WMQ_SSL_CIPHER_SPEC, &quot;TLS_RSA_WITH_AES_256_GCM_SHA384&quot;)

System.setProperty(&quot;com.ibm.mq.cfg.preferTLS&quot;, &quot;true&quot;)
System.setProperty(&quot;com.ibm.mq.cfg.useIBMCipherMappings&quot;, &quot;false&quot;)
System.setProperty(&quot;javax.net.ssl.keyStore&quot;, tlsKeystorePath)
System.setProperty(&quot;javax.net.ssl.keyStorePassword&quot;, tlsKeystorePwd)
System.setProperty(&quot;javax.net.ssl.trustStore&quot;, tlsKeystorePath)
System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, tlsKeystorePwd)

/**
 * TLS Section - END
 */
 
def conn = cf.createConnection(&quot;app&quot;, &quot;test&quot;)
def sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)
def destination = sess.createQueue(queueName)

conn.start()

log.info(&quot;#### Completed setup!&quot;)

/**
 * Save objects required into other Thread Groups
 */
System.getProperties().put(&quot;Session&quot;, sess)
System.getProperties().put(&quot;Connection&quot;, conn)
System.getProperties().put(&quot;Destination&quot;, destination)

vars.put(&quot;setupDone&quot;, &quot;true&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Producer/Consumer Pools" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.util.concurrent.locks.ReentrantLock

class ResourceArbiter&lt;T&gt; {
    private final ReentrantLock lock = new ReentrantLock()

    // true is available
    def resources = [:]
    
    public ResourceArbiter(List&lt;T&gt; args) {
        args.each{
            resources[it] = true
        }
    }

    // Thread Safe
    public T get() {
    
        T resp = null
        
        lock.lock()
        try {
            resp = resources.find{ it.value == true }?.key
            resources[resp] = false
        } finally {
            lock.unlock()
        }
        
        return resp
    }
    
    // Thread Safe    
    public void free(T item) {
    
        // solo se false
        if (!resources[item]) {
            lock.lock()
            try {
                 resources[item] = true
            } finally {
                lock.unlock()
            }
        }
    }
}

import java.util.stream.IntStream
import javax.jms.MessageProducer
import javax.jms.MessageConsumer

def nrThreads = vars.get(&quot;nrThreads&quot;) as Integer
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

def producers = new ResourceArbiter&lt;MessageProducer&gt;(
	IntStream
		.rangeClosed(1, nrThreads)
		.collect{sess.createProducer(destination)})
def consumers = new ResourceArbiter&lt;MessageConsumer&gt;(
	IntStream
		.rangeClosed(1, nrThreads)
		.collect{sess.createConsumer(destination)})

System.getProperties().put(&quot;ProducersPool&quot;, producers)
System.getProperties().put(&quot;ConsumersPool&quot;, consumers)

log.info(&quot;##### Created Producers/Consumers Pools&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup Cleanup" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.Instant

/**
 * Take shared objects : Session and Destination for MQ
 */
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

def start = Instant.now()

// create a new consumer
def consumer = sess.createConsumer(destination)

// counting
def count = 0

log.info(&quot;#### Starting cleanup.&quot;)

while( true ) {
    msg = consumer.receive(100)
    if( msg == null ) break
    else count++
}

// close consumer
consumer.close()

def stop = Instant.now()

def cleanupMessage = &quot;#### Cleaned &quot;+count+&quot; messages.&quot;

log.info(cleanupMessage)

SampleResult.setResponseData(cleanupMessage)
SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
SampleResult.setLatency( stop.toEpochMilli() - start.toEpochMilli() )</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512575049000</longProp>
        <longProp name="ThreadGroup.end_time">1512575049000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${stopDone}&quot;==&quot;false&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Stop Cleanup" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.Instant

/**
 * Take shared objects : Session and Destination for MQ
 */
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

def start = Instant.now()

// create a new consumer
def consumer = sess.createConsumer(destination)

// counting
def count = 0

log.info(&quot;#### Starting cleanup.&quot;)

while( true ) {
    msg = consumer.receive(100)
    if( msg == null ) break
    else count++
}

// close consumer
consumer.close()

def stop = Instant.now()

def cleanupMessage = &quot;#### Cleaned &quot;+count+&quot; messages.&quot;

log.info(cleanupMessage)

SampleResult.setResponseData(cleanupMessage)
SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
SampleResult.setLatency( stop.toEpochMilli() - start.toEpochMilli() )</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Teardown" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">/**
 * Invoke close Session and Connection
 */
System.getProperties().get(&quot;Session&quot;).close()
System.getProperties().get(&quot;Connection&quot;).close()

log.info(&quot;#### Stop completed!&quot;)

vars.put(&quot;stopDone&quot;, &quot;true&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Producer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${nrThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpTime}</stringProp>
        <longProp name="ThreadGroup.start_time">1512566050000</longProp>
        <longProp name="ThreadGroup.end_time">1512566050000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__jexl2(${msg4Second}*60)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Producer" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.Instant

import javax.jms.JMSException

import java.io.StringWriter
import java.io.PrintWriter

/**
 * Take shared objects : Session and Destination for MQ
 */
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

// used just to add some random value
def rnd = new Random(System.currentTimeMillis())

// create a TextMessage and assign it a payload
def payload = String.format(&quot;JMeter...WMQ...TLSv1/SSLv3...test message no. %09d!&quot;, rnd.nextInt(Integer.MAX_VALUE))

def producer = null

try {
	// producer
	producer = System.getProperties().get(&quot;ProducersPool&quot;).get()
	
	def msg = sess.createTextMessage(payload)

	def start = Instant.now()

	// send message to IBM MQ
	producer.send(msg)

	def stop = Instant.now()

	log.debug(&quot;### Producer successfully.&quot;)
	
	// add some information to SampleResult object that can be seen in Listeners
	SampleResult.setResponseData(msg.toString())
	SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
	SampleResult.setLatency( stop.toEpochMilli() - start.toEpochMilli() )
	
} catch(JMSException e) {

	log.error(&quot;XXX Producer returns error : &quot; + e.getMessage())

	StringWriter sw = new StringWriter()
	e.printStackTrace(new PrintWriter(sw))
	String exceptionAsString = sw.toString()
	
	// add some information to SampleResult to track error
	SampleResult.setResponseData(exceptionAsString)
	SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
	SampleResult.setSuccessful(false)
} finally {
	if ( producer != null )
		System.getProperties().get(&quot;ProducersPool&quot;).free(producer)
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Consumer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${nrThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpTime}</stringProp>
        <longProp name="ThreadGroup.start_time">1512567019000</longProp>
        <longProp name="ThreadGroup.end_time">1512567019000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__jexl2(${msg4Second}*60)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Consumer" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import javax.jms.TextMessage
import javax.jms.BytesMessage

import java.time.LocalDate
import java.time.LocalTime
import java.time.Instant
import java.time.format.DateTimeFormatter

import javax.jms.JMSException

import java.io.StringWriter
import java.io.PrintWriter

/**
 * Processing consumed message
 */
def processConsumed = { msg, start, stop -&gt; 
	if (msg != null) {
	
		if (msg instanceof BytesMessage) {
			def tmp = msg.asType(BytesMessage)
			log.debug(&quot;#### Incoming BytesMessage contains &quot; + tmp.getBodyLength() + &quot; bytes&quot;)
		} else if (msg instanceof TextMessage) {
			def tmp = msg.asType(TextMessage)
			log.debug(&quot;#### Incoming TextMessage contains -&gt; &quot; + tmp.getText())
		} else
			log.debug(&quot;#### Incoming message has unexpected format!&quot;)
	
		// parse some IBM MQ properties
		LocalDate date = LocalDate.parse(msg.getStringProperty(&quot;JMS_IBM_PutDate&quot;),
						DateTimeFormatter.ofPattern(&quot;uuuuMMdd&quot;))
		LocalTime time = LocalTime.parse(msg.getStringProperty(&quot;JMS_IBM_PutTime&quot;),
						DateTimeFormatter.ofPattern(&quot;HHmmssSS&quot;))
	
		// Just an information : this is the put time of message into IBM MQ and it&apos;s in UTC
		def timestampDetail = String.format(&quot;#### Incoming message was placed in queue @ %s - %s&quot;, date, time)
		log.debug(timestampDetail)
	
		// add some information to SampleResult object that can be seen in Listeners
		SampleResult.setResponseData(msg.toString() + &quot;\n\n&quot; + timestampDetail)
		SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
		SampleResult.setLatency( stop.toEpochMilli() - start.toEpochMilli() )
	
	} else 
		log.info(&quot;#### Nothing to fetch!&quot;)
}

/**
 * Take shared objects : Session and Destination for MQ
 */
def sess = System.getProperties().get(&quot;Session&quot;)
def destination = System.getProperties().get(&quot;Destination&quot;)

def consumer = null;

try {
	// consumer
	consumer = System.getProperties().get(&quot;ConsumersPool&quot;).get()

	def start = Instant.now()

	// look up for an incoming message
	def msg = consumer.receive(1000) // one second wait

	def stop = Instant.now()

	processConsumed.call(msg,start,stop)
	
	log.debug(&quot;### Consumer successfully.&quot;)
	
} catch(JMSException e) {

	log.error(&quot;XXX Consumer returns error : &quot; + e.getMessage())

	StringWriter sw = new StringWriter()
	e.printStackTrace(new PrintWriter(sw))
	String exceptionAsString = sw.toString()
	
	// add some information to SampleResult to track error
	SampleResult.setResponseData(exceptionAsString)
	SampleResult.setDataType( org.apache.jmeter.samplers.SampleResult.TEXT )
	SampleResult.setSuccessful(false)
} finally {
	if ( consumer != null)
		System.getProperties().get(&quot;ConsumersPool&quot;).free(consumer)
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${perfmon_report_file}</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="975495655">
            <stringProp name="-1758657402">${under_test_host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="3227604">idle</stringProp>
          </collectionProp>
          <collectionProp name="214701337">
            <stringProp name="-1758657402">${under_test_host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-1993889503">Memory</stringProp>
            <stringProp name="1729935015">unit=kb:used</stringProp>
          </collectionProp>
          <collectionProp name="-463533089">
            <stringProp name="-1758657402">${under_test_host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-274342153">Network I/O</stringProp>
            <stringProp name="-2032735023">bytesrecv</stringProp>
          </collectionProp>
          <collectionProp name="-395597144">
            <stringProp name="-1758657402">${under_test_host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="82881">TCP</stringProp>
            <stringProp name="96816167">estab</stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
